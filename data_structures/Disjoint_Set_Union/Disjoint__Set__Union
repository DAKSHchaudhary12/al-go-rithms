#include <iostream>
#include <vector>

using namespace std;

class DisjointSetUnion {
private:
    vector<int> parent;
    vector<int> rank;

public:
    DisjointSetUnion(int size) {
        parent.resize(size);
        rank.resize(size, 0);
        for (int i = 0; i < size; ++i) {
            parent[i] = i;
        }
    }

    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]); // Path compression
        }
        return parent[x];
    }

    void unionSets(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX == rootY) return;

        // Union by rank
        if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else if (rank[rootX] > rank[rootY]) {
            parent[rootY] = rootX;
        } else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
    }
};

int main() {
    DisjointSetUnion dsu(5); // Creating a DSU with 5 elements

    dsu.unionSets(0, 1);
    dsu.unionSets(2, 3);
    dsu.unionSets(1, 4);

    cout << "Are 0 and 2 in the same set? " << (dsu.find(0) == dsu.find(2) ? "Yes" : "No") << endl; // No
    cout << "Are 1 and 4 in the same set? " << (dsu.find(1) == dsu.find(4) ? "Yes" : "No") << endl; // Yes

    return 0;
}
